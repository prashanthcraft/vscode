name: Product Release Workflow

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to build'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

permissions:
  contents: write

jobs:
  linux_build:
    runs-on: ${{ matrix.runner }}
    environment: production
    name: "Release for Linux"
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            arch: arm64
          - runner: ubuntu-24.04
            arch: x64
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          path: 'repository'
          ref: ${{ github.event.inputs.release_tag || github.event.release.tag_name }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: repository/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-node-${{ hashFiles('repository/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-node-

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: 'repository/package-lock.json'

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Linux Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev python-is-python3 fakeroot rpm libcups2-dev

      - name: Install Project Dependencies
        working-directory: ${{ github.workspace }}/repository
        run: npm install

      - name: Build Codingle Executables
        working-directory: ./repository
        run: npm run gulp vscode-linux-${{ matrix.arch }}-min

      - name: Prepare Debian Package Files
        working-directory: ./repository
        run: npm run gulp vscode-linux-${{ matrix.arch }}-prepare-deb

      - name: Build Debian Package
        working-directory: ./repository
        run: npm run gulp vscode-linux-${{ matrix.arch }}-build-deb

      - name: Rename Debian Package
        working-directory: ${{ github.workspace }}/repository/.build/linux/deb/${{ matrix.arch == 'x64' && 'amd64' || 'arm64' }}/deb
        run: mv *.deb linux-${{ matrix.arch }}.deb

      - name: Upload Debian Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-deb
          path: ${{ github.workspace }}/repository/.build/linux/deb/${{ matrix.arch == 'x64' && 'amd64' || 'arm64' }}/deb/linux-${{ matrix.arch }}.deb

      - name: Prepare RPM Package Files
        working-directory: ./repository
        run: npm run gulp vscode-linux-${{ matrix.arch }}-prepare-rpm

      - name: Build RPM Package
        working-directory: ./repository
        run: npm run gulp vscode-linux-${{ matrix.arch }}-build-rpm

      - name: Rename RPM Package
        working-directory: ${{ github.workspace }}/repository/.build/linux/rpm/${{ matrix.arch == 'x64' && 'x86_64' || 'aarch64' }}
        run: mv *.rpm linux-${{ matrix.arch }}.rpm

      - name: Upload RPM Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-rpm
          path: ${{ github.workspace }}/repository/.build/linux/rpm/${{ matrix.arch == 'x64' && 'x86_64' || 'aarch64' }}/linux-${{ matrix.arch }}.rpm

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/repository/.build/linux/deb/${{ matrix.arch == 'x64' && 'amd64' || 'arm64' }}/deb/linux-${{ matrix.arch }}.deb
            ${{ github.workspace }}/repository/.build/linux/rpm/${{ matrix.arch == 'x64' && 'x86_64' || 'aarch64' }}/linux-${{ matrix.arch }}.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Temporary Files
        if: always()
        run: |
          rm -rf "${{ github.workspace }}/repository/.build"
          rm -rf "${{ github.workspace }}/repository/node_modules"

  windows_build:
    runs-on: 'windows-latest'
    environment: production
    name: "Release for Windows"
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      npm_config_arch: ${{ matrix.arch == 'x64' && 'x64' || 'arm64' }}
    strategy:
      fail-fast: false
      matrix:
        target: [user, system]
        arch: [x64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: 'repository'
          ref: ${{ github.event.inputs.release_tag || github.event.release.tag_name }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: repository/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('repository/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: 'repository/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: ${{ github.workspace }}/repository
        run: npm install

      - name: Build Executables
        working-directory: ./repository
        run: npm run gulp vscode-win32-${{ matrix.arch }}-min

      - name: Apply Inno Setup Updater
        working-directory: ./repository
        run: npm run gulp vscode-win32-${{ matrix.arch }}-inno-updater

      - name: Debug- List Files to Sign
        run: dir ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}

      - name: Sign Executables
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_TRUSTED_SIGNING_ACCOUNT_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
          files-folder: ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}
          files-folder-filter: exe,dll,node,ps1,psm1
          files-folder-recurse: true
          files-folder-depth: 10
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Create Installer
        working-directory: ./repository
        run: npm run gulp vscode-win32-${{ matrix.arch }}-${{ matrix.target }}-setup

      - name: Sign Installer
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_TRUSTED_SIGNING_ACCOUNT_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
          files: ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}/${{ matrix.target }}-setup/Codingle.exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-${{ matrix.target }}-exe
          path: ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}/${{ matrix.target }}-setup/Codingle.exe

      - name: Rename Installer
        working-directory: ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}/${{ matrix.target }}-setup
        run: mv Codingle.exe windows-${{ matrix.arch }}-${{ matrix.target }}.exe

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ github.workspace }}/repository/.build/win32-${{ matrix.arch }}/${{ matrix.target }}-setup/windows-${{ matrix.arch }}-${{ matrix.target }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Temporary Files
        if: always()
        run: |
          Remove-Item -Path "${{ github.workspace }}/repository/.build" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "${{ github.workspace }}/repository/node_modules" -Recurse -Force -ErrorAction SilentlyContinue
